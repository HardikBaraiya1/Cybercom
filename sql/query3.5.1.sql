-- Create a database called "sales" with three tables: "customers", "orders", and "products". 

CREATE DATABASE IF NOT EXISTS sales;


USE sales;


CREATE TABLE IF NOT EXISTS customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20)
);


CREATE TABLE IF NOT EXISTS orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);


CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    unit_price DECIMAL(10, 2),
    description TEXT
);


-- 1.	Insert at least five customers, five products, and ten orders into the respective tables. 
-- Make sure that at least two customers have multiple orders, and at least two products are included in multiple orders.

INSERT INTO customers (first_name, last_name, email, phone)
VALUES
    ('Rajesh', 'Sharma', 'rajesh@example.com', '9876543210'),
    ('Priya', 'Patel', 'priya@example.com', '9876543211'),
    ('Amit', 'Singh', 'amit@example.com', '9876543212'),
    ('Neha', 'Kumar', 'neha@example.com', '9876543213'),
    ('Sneha', 'Gupta', 'sneha@example.com', '9876543214');

--
INSERT INTO products (product_name, unit_price, description)
VALUES
    ('Saree', 2000.00, 'Traditional Indian attire for women'),
    ('Kurta', 1500.00, 'Traditional Indian attire for men'),
    ('Jewelry Set', 5000.00, 'Indian ethnic jewelry set'),
    ('Handbag', 1000.00, 'Designer handbag for women'),
    ('Men\'s Watch', 3000.00, 'Stylish wristwatch for men');

--
INSERT INTO orders (order_date, customer_id, product_id)
VALUES
    ('2024-03-10', 1, 1),
    ('2024-03-11', 2, 2),
    ('2024-03-11', 3, 1),
    ('2024-03-12', 4, 3),
    ('2024-03-13', 5, 4),
    ('2024-03-14', 1, 5),
    ('2024-03-15', 2, 3),
    ('2024-03-15', 3, 4),
    ('2024-03-16', 4, 2),
    ('2024-03-17', 5, 1);

select * from customers ;
select * from orders ;
-- 2.	Write a query that retrieves the customer's first name, last name, email, and the number of orders they have placed. The results should be ordered by the number of orders in descending order.
select c.first_name,c.last_name,c.email,count(o.order_id) as total_orders from customers c
	left join orders o on o.customer_id = c.customer_id
    group by c.customer_id
    order by total_orders desc;
    
    
-- 3.	Write a query that retrieves the product name, the total number of orders for each product, 
-- and the total revenue generated by each product. 
-- The results should be ordered by the total revenue in descending order.

select * from orders order by product_id;
select * from products;

select p.product_name, count(o.product_id) as total_no_of_orders , (p.unit_price * count(o.product_id)) as total_revenue from products p
	left join orders o
    on o.product_id = o.product_id
    group by p.product_id,o.product_id
    order by total_revenue desc;
    
select * from products left join orders on products.product_id = orders.product_id;

-- 4.	Write a query that retrieves the first name, last name, email, and product name for each order. The results should only include orders where the customer has placed multiple orders.
SELECT c.first_name, c.last_name, c.email, p.product_name
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN products p ON o.product_id = p.product_id
WHERE c.customer_id IN (
    SELECT customer_id
    FROM orders
    GROUP BY customer_id
    HAVING COUNT(*) > 1
);

-- 5.	Write a query that retrieves the first name, last name, and email for each customer who has placed at least one order for a product with a unit price greater than $50.
SELECT DISTINCT c.first_name, c.last_name, c.email
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN products p ON o.product_id = p.product_id
WHERE p.unit_price > 50;

-- 6.	Write a query that retrieves the product name and the number of times it has been ordered, but only includes products that have been ordered more than once.
SELECT p.product_name, COUNT(o.order_id) AS num_orders
FROM products p
INNER JOIN orders o ON p.product_id = o.product_id
GROUP BY p.product_id
HAVING COUNT(o.order_id) > 1;
